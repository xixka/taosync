name: 构建

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  APP_NAME: taoSync

jobs:
  get-version:
    name: 获取版本号
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.getVersion.outputs.VERSION }}

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - id: getVersion
        name: 获取版本号
        run: |
          versions=$(head -n 1 version.txt)
          IFS=',' read -ra versionList <<< "$versions"
          cuVersion="${versionList[0]}"
          echo "VERSION=$cuVersion" >> "$GITHUB_OUTPUT"

  build-frontend:
    name: 构建前端
    runs-on: ubuntu-latest
    needs: [ get-version ]
    env:
      VERSION: ${{ needs.get-version.outputs.VERSION }}

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 安装Node.js 14.x
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"

      - name: 安装依赖并构建前端
        run: |
          sed -i "s/__version_placeholder__/$VERSION/g" frontend/src/views/page/setting/index.vue
          cd frontend
          npm install
          npm run build

      - name: 上传artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          retention-days: 1

  build-linux:
    name: 构建Linux多平台
    runs-on: ubuntu-latest
    needs: [ get-version, build-frontend ]
    env:
      VERSION: ${{ needs.get-version.outputs.VERSION }}
    strategy:
      matrix:
        platform:
          - amd64
          - arm64
          - armv7
          - 386
          - armv6
          - s390x
          - ppc64le
          
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 下载前端
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: 安装QEMU
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support
          sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: 设置目标平台变量
        id: set-platform
        run: |
          case "${{ matrix.platform }}" in
            amd64)   TARGET_ARCH="x86_64" ;;
            arm64)   TARGET_ARCH="aarch64" ;;
            armv7)   TARGET_ARCH="armv7l" ;;
            386)     TARGET_ARCH="i686" ;;
            armv6)   TARGET_ARCH="armv6l" ;;
            s390x)   TARGET_ARCH="s390x" ;;
            ppc64le) TARGET_ARCH="ppc64le" ;;
          esac
          echo "TARGET_ARCH=$TARGET_ARCH" >> $GITHUB_ENV
          echo "TARGET_PLATFORM=${{ matrix.platform }}" >> $GITHUB_ENV

      - name: 安装目标平台Python
        run: |
          # 安装目标平台的Python解释器
          case "${{ env.TARGET_PLATFORM }}" in
            amd64)   PYTHON_PLATFORM="linux64" ;;
            arm64)   PYTHON_PLATFORM="linux-aarch64" ;;
            armv7)   PYTHON_PLATFORM="linux-armv7l" ;;
            386)     PYTHON_PLATFORM="linux32" ;;
            armv6)   PYTHON_PLATFORM="linux-armv6l" ;;
            s390x)   PYTHON_PLATFORM="linux-s390x" ;;
            ppc64le) PYTHON_PLATFORM="linux-ppc64le" ;;
          esac
          
          # 下载并安装目标平台的Python
          PYTHON_VERSION="3.11.4"
          wget "https://github.com/indygreg/python-build-standalone/releases/download/20230726/cpython-${PYTHON_VERSION}+20230726-${PYTHON_PLATFORM}-install_only.tar.gz"
          tar -xzf "cpython-${PYTHON_VERSION}+20230726-${PYTHON_PLATFORM}-install_only.tar.gz"
          export PATH="$PWD/python/bin:$PATH"
          echo "PYTHON_PATH=$PWD/python/bin/python" >> $GITHUB_ENV

      - name: 安装依赖并构建
        run: |
          # 设置QEMU前缀
          QEMU_PREFIX=""
          if [ "${{ env.TARGET_PLATFORM }}" != "amd64" ]; then
            QEMU_PREFIX="qemu-${{ env.TARGET_ARCH }}-static"
          fi
          
          # 安装PyInstaller和依赖
          $QEMU_PREFIX ${{ env.PYTHON_PATH }} -m pip install 'pyinstaller>=6,<7'
          $QEMU_PREFIX ${{ env.PYTHON_PATH }} -m pip install -r requirements.txt
          
          # 使用PyInstaller构建
          $QEMU_PREFIX ${{ env.PYTHON_PATH }} -m PyInstaller $APP_NAME.spec \
            --distpath "dist/${{ env.TARGET_PLATFORM }}" \
            --workpath "build/${{ env.TARGET_PLATFORM }}"

      - name: 上传artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-linux-${{ env.TARGET_PLATFORM }}
          path: dist/${{ env.TARGET_PLATFORM }}
          retention-days: 1
