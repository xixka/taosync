name: 构建

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  APP_NAME: taoSync

jobs:
  get-version:
    name: 获取版本号
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.getVersion.outputs.VERSION }}

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - id: getVersion
        name: 获取版本号
        run: |
          versions=$(head -n 1 version.txt)
          IFS=',' read -ra versionList <<< "$versions"
          cuVersion="${versionList[0]}"
          echo "VERSION=$cuVersion" >> "$GITHUB_OUTPUT"
          
  build-frontend:
    name: 构建前端
    runs-on: ubuntu-latest
    needs: [ get-version ]
    env:
      VERSION: ${{ needs.get-version.outputs.VERSION }}

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 安装Node.js 14.x
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"

      - name: 安装依赖并构建前端
        run: |
          sed -i "s/__version_placeholder__/$VERSION/g" frontend/src/views/page/setting/index.vue
          cd frontend
          npm install
          npm run build
      - name: 上传artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          retention-days: 1

  build-linux:
    name: 构建Linux多平台
    runs-on: ubuntu-latest
    needs: [ get-version, build-frontend ]
    env:
      VERSION: ${{ needs.get-version.outputs.VERSION }}
    strategy:
      matrix:
        platform: [ "amd64", "arm64", "armv7", "386" ]  # 新增armv7和386平台
          
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 下载前端
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: 设置QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: 设置目标平台变量
        id: set-platform
        run: |
          case "${{ matrix.platform }}" in
            amd64)   TARGET_ARCH="amd64" ;;
            arm64)   TARGET_ARCH="arm64" ;;
            armv7)   TARGET_ARCH="armv7" ;;  # 新增armv7
            386)     TARGET_ARCH="386" ;;    # 新增386
          esac
          echo "TARGET_ARCH=$TARGET_ARCH" >> $GITHUB_ENV
          echo "TARGET_PLATFORM=${{ matrix.platform }}" >> $GITHUB_ENV
          
      - name: 创建构建目录
        run: |
          mkdir -p dist/${{ env.TARGET_PLATFORM }}
          
      - name: 在Docker容器中构建
        run: |
          # 使用兼容旧系统的镜像
          case "${{ matrix.platform }}" in
            amd64)   BASE_IMAGE="python:3.11-slim-bullseye" ;;  # Debian 11 (glibc 2.31)
            arm64)   BASE_IMAGE="arm64v8/python:3.11-slim-bullseye" ;;
            armv7)   BASE_IMAGE="arm32v7/python:3.11-slim-bullseye" ;;  # armv7镜像
            386)     BASE_IMAGE="i386/python:3.11-slim-bullseye" ;;    # 386镜像
          esac
          echo "使用兼容镜像: $BASE_IMAGE"
          
          docker run --rm \
            --platform linux/${{ env.TARGET_ARCH }} \
            -v "$(pwd):/app" \
            -w /app \
            $BASE_IMAGE \
            sh -c "
              # 安装构建依赖
              apt-get update && apt-get install -y build-essential && rm -rf /var/lib/apt/lists/*
              
              # 安装Python依赖
              pip install --upgrade pip
              pip install 'pyinstaller>=6,<7'
              pip install -r requirements.txt
              
              # 添加库路径修复
              export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib/x86_64-linux-gnu
              
              # 执行构建
              pyinstaller $APP_NAME.spec \
                --distpath /app/dist/${{ env.TARGET_PLATFORM }} \
                --workpath /app/build/${{ env.TARGET_PLATFORM }}
            "
                
      - name: 上传artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-linux-${{ env.TARGET_PLATFORM }}
          path: dist/${{ env.TARGET_PLATFORM }}
          retention-days: 1
